config:
    options:
        any:
            definitions:
                win32 and clang:
                    public:
                        - BOOST_USE_INTRIN_H=1
                        - BOOST_USE_WINDOWS_H=1
    post_sources: |
        set(dummy_file ${SDIR}/autolink.dummy)
        if (NOT EXISTS ${dummy_file})
            file_write_once(${SDIR}/include/boost/config/auto_link.hpp "
        #ifdef BOOST_LIB_PREFIX
        #  undef BOOST_LIB_PREFIX
        #endif
        #if defined(BOOST_LIB_NAME)
        #  undef BOOST_LIB_NAME
        #endif
        #if defined(BOOST_LIB_THREAD_OPT)
        #  undef BOOST_LIB_THREAD_OPT
        #endif
        #if defined(BOOST_LIB_RT_OPT)
        #  undef BOOST_LIB_RT_OPT
        #endif
        #if defined(BOOST_LIB_LINK_OPT)
        #  undef BOOST_LIB_LINK_OPT
        #endif
        #if defined(BOOST_LIB_DEBUG_OPT)
        #  undef BOOST_LIB_DEBUG_OPT
        #endif
        #if defined(BOOST_DYN_LINK)
        #  undef BOOST_DYN_LINK
        #endif
            ")
            file(WRITE ${dummy_file} "")
        endif()

context:
    build:
        - src/execution_context.cpp
        - src/posix/stack_traits.cpp
        - src/windows/stack_traits.cpp

    post_sources: |
        remove_src_win32(src/posix/stack_traits.cpp)
        remove_src_unix(src/windows/stack_traits.cpp)

        add_definitions(-DBOOST_EXECUTION_CONTEXT=1)

        if(WIN32)
          set(default_abi ms)
        elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "mips")
          set(default_abi o32)
        else()
          set(default_abi sysv)
        endif()

        if(APPLE)
          set(default_binary_format mach-o)
        elseif(WIN32)
          set(default_binary_format pe)
        else()
          set(default_binary_format elf)
        endif()

        # TODO: add armasm
        set(asm_type gas)
        if (MSVC)
            set(asm_type masm)

            enable_language(ASM_MASM)
            set(ext asm)
        endif()

        if (UNIX)
            enable_language(ASM)
            set(ext S)
        endif()

        set(arch i386)
        if (CMAKE_SIZEOF_VOID_P EQUAL 8)
            set(arch x86_64)
        endif()

        string(FIND "${CMAKE_SYSTEM_PROCESSOR}" "arm" arm)
        if (arm EQUAL 0)
            set(default_abi aapcs)
            set(arch arm)
            if (CMAKE_SIZEOF_VOID_P EQUAL 8)
                set(arch ${arch}64)
            endif()
        endif()

        set(asm
            src/asm/jump_${arch}_${default_abi}_${default_binary_format}_${asm_type}.${ext}
            src/asm/make_${arch}_${default_abi}_${default_binary_format}_${asm_type}.${ext}
            src/asm/ontop_${arch}_${default_abi}_${default_binary_format}_${asm_type}.${ext}
        )

        if (MSVC)
            foreach(a ${asm})
                set_source_files_properties(${a} PROPERTIES COMPILE_FLAGS "/safeseh")
            endforeach()
        endif()

        set(src ${src} ${asm})

    options:
      static:
        definitions:
          private:
            - BOOST_CONTEXT_EXPORT=
      shared:
        definitions:
          private:
            - BOOST_CONTEXT_EXPORT=EXPORT

coroutine:
    post_sources: |
        remove_src_win32(src/posix/stack_traits.cpp)
        remove_src_unix(src/windows/stack_traits.cpp)

    options:
      shared:
        definitions:
          public:
            - BOOST_COROUTINES_DYN_LINK
      any:
        definitions:
            private:
                - BOOST_COROUTINES_SOURCE

exception:
    static_only: true

fiber:
    options:
      shared:
        definitions:
          private:
            - BOOST_FIBERS_SOURCE
      any:
        definitions:
            private:
                - BOOST_FIBERS_DYN_LINK

function:
    files: include/.*\.hpp

iostreams:
    dependencies:
        - pvt.cppan.demo.madler.zlib: 1
        - pvt.cppan.demo.bzip2: 1
        - pvt.cppan.demo.xz_utils.lzma: 5

locale:
    c++: 11

    exclude_from_build:
        -   src/icu/.*
        -   src/posix/.*
        -   src/win32/.*

    options:
        any:
            definitions:
                unix:
                    public:
                        -   BOOST_LOCALE_NO_WINAPI_BACKEND
                        -   BOOST_LOCALE_WITH_ICONV
                win32:
                    public:
                        -   BOOST_LOCALE_NO_POSIX_BACKEND

    dependencies:
        - name: pvt.cppan.demo.gnu.iconv.libiconv
          version: 1
          conditions:
            - UNIX
        - name: pvt.cppan.demo.unicode.icu.i18n
          version: "*"
          conditions:
            - UNIX

    post_sources: |
        if (WIN32)
            add_src_dir(src/win32/*)
        else()
            add_src_dir(src/icu/*)
            add_src_dir(src/posix/*)
        endif()

log:
    files:
        headers: include/.*
        sources:
            root: src
            files:
                - .*\.hpp
                - .*\.mc
                - attribute_name.cpp
                - attribute_set.cpp
                - attribute_value_set.cpp
                - code_conversion.cpp
                - core.cpp
                - date_time_format_parser.cpp
                - debug_output_backend.cpp
                - default_attribute_names.cpp
                - default_sink.cpp
                - dump.cpp
                - event.cpp
                - exceptions.cpp
                - format_parser.cpp
                - global_logger_storage.cpp
                - light_rw_mutex.cpp
                - named_scope.cpp
                - named_scope_format_parser.cpp
                - once_block.cpp
                - process_id.cpp
                - process_name.cpp
                - record_ostream.cpp
                - severity_level.cpp
                - spirit_encoding.cpp
                - syslog_backend.cpp
                - text_file_backend.cpp
                - text_multifile_backend.cpp
                - text_ostream_backend.cpp
                - thread_id.cpp
                - threadsafe_queue.cpp
                - thread_specific.cpp
                - timer.cpp
                - timestamp.cpp
                - trivial.cpp
                - unhandled_exception_count.cpp

    post_sources: |
        remove_src_unix(src/debug_output_backend.cpp)
        remove_src_unix(src/light_rw_mutex.cpp)

    options:
        any:
            definitions:
                public:
                    - BOOST_LOG_WITHOUT_EVENT_LOG
                private:
                    - BOOST_LOG_BUILDING_THE_LIB
                win32:
                    public:
                        - WIN32_LEAN_AND_MEAN
                        - BOOST_USE_WINDOWS_H
                        - NOMINMAX
        shared:
            definitions:
                public:
                    - BOOST_LOG_DYN_LINK
                private:
                    - BOOST_LOG_DLL

log_setup:
    files:
        headers: include/.*
        sources:
            root: src
            files:
                - .*\.hpp
                - .*\.mc
                - default_filter_factory.cpp
                - default_formatter_factory.cpp
                - filter_parser.cpp
                - formatter_parser.cpp
                - init_from_settings.cpp
                - init_from_stream.cpp
                - matches_relation_factory.cpp
                - parser_utils.cpp
                - settings_parser.cpp

    dependencies:
        - log

    options:
        any:
            definitions:
                public:
                    - BOOST_LOG_WITHOUT_EVENT_LOG
                private:
                    - BOOST_LOG_SETUP_BUILDING_THE_LIB
        shared:
            definitions:
                public:
                    - BOOST_LOG_DYN_LINK
                private:
                    - BOOST_LOG_SETUP_DLL

math:
    include_directories:
        private:
            - src/tr1
    options:
        shared:
            definitions:
                public:
                    - BOOST_MATH_TR1_DYN_LINK

pool:
    files:
        - include/.*\.hpp
        - include/.*\.ipp

python:
    dependencies:
        - pvt.cppan.demo.python.libcompat

signals:
    files:
        - include/.*\.hpp

spirit:
    files:
        - include/.*\.hpp
        - include/.*\.ipp
        - include/.*\.cpp

stacktrace:
    exclude_from_build:
        - src/.*
    options:
        any:
            link_libraries:
                win32:
                    public:
                        -   DbgEng
            definitions:
                unix:
                    public:
                        -   BOOST_STACKTRACE_USE_NOOP
    post_sources: |
        add_src_win32(src/windbg.cpp)
        add_src_unix(src/noop.cpp)
        #add_src_unix(src/backtrace.cpp)
        #add_src_unix(src/basic.cpp)

thread:
    post_sources: |
        remove_src(src/pthread/once_atomic.cpp)
        remove_src_win32(src/pthread/thread.cpp)
        remove_src_win32(src/pthread/once.cpp)
        remove_src_unix(src/win32/thread.cpp)
        remove_src_unix(src/win32/tss_dll.cpp)
        remove_src_unix(src/win32/tss_pe.cpp)

    options:
        static:
            post_sources: |
                remove_src_win32(src/win32/tss_dll.cpp)
        shared:
            post_sources: |
                remove_src_win32(src/win32/tss_pe.cpp)
